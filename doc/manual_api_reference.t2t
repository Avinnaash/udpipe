UDPipe API Reference
====================

The UDPipe API is defined in header ``udpipe.h`` and resides in
``ufal::udpipe`` namespace. The API allows only using existing models,
for custom model creation you have to use the ``train_parser`` binary.

The strings used in the UDPipe API are always UTF-8 encoded (except from
file paths, whose encoding is system dependent).


== UDPipe Versioning ==[versioning]

UDPipe is versioned using [Semantic Versioning http://semver.org/].
Therefore, a version consists of three numbers //major.minor.patch//, optionally
followed by a hyphen and pre-release version info, with the following semantics:

- Stable versions have no pre-release version info, development have non-empty
  pre-release version info.
- Two versions with the same //major.minor// have the same API with the same
  behaviour, apart from bugs. Therefore, if only //patch// is increased, the
  new version is only a bug-fix release.
- If two versions //v// and //u// have the same //major//, but //minor(v)// is
  greater than //minor(u)//, version //v// contains only additions to the API.
  In other words, the API of //u// is all present in //v// with the same
  behaviour (once again apart from bugs). It is therefore safe to upgrade to
  a newer UDPipe version with the same //major//.
- If two versions differ in //major//, their API may differ in any way.


Models created by UDPipe have the same behaviour in all UDPipe
versions with same //major//, apart from obvious bugfixes. On the other hand,
models created from the same data by different //major.minor// UDPipe
versions may have different behaviour.

== Struct string_piece ==[string_piece]
```
struct string_piece {
  const char* str;
  size_t len;

  string_piece();
  string_piece(const char* str);
  string_piece(const char* str, size_t len);
  string_piece(const std::string& str);
}
```

The [``string_piece`` #string_piece] is used for efficient string passing. The string
referenced in [``string_piece`` #string_piece] is not owned by it, so users have to make sure
the referenced string exists as long as the [``string_piece`` #string_piece].

== Class word ==[word]
```
class word {
 public:
  int id;         // 0 is root, >0 is sentence word, <0 is undefined
  string form;    // form
  string lemma;   // lemma
  string upostag; // universal part-of-speech tag
  string xpostag; // language-specific part-of-speech tag
  string feats;   // list of morphological features
  int head;       // head, 0 is root, <0 is undefined
  string deprel;  // dependency relation to the head
  string deps;    // secondary dependencies
  string misc;    // miscellaneous information

  vector<int> children;

  word(int id = -1, [string_piece #string_piece] form = string_piece());
};
```

The [``word`` #word] class represents a sentence word.
The [``word`` #word] fields correspond to [CoNLL-U fields http://universaldependencies.org/docs/format.html],
with the ``children`` field representing the opposite direction of
``head`` links (the elements of the ``children`` array are in ascending order).

== Class multiword_token ==[multiword_token]
```
class multiword_token {
 public:
  int id_first, id_last;
  string form;
  string misc;

  multiword_token(int id_first = -1, int id_last = -1, [string_piece #string_piece] form = string_piece(), [string_piece #string_piece] misc = string_piece());
};
```

The [``multiword_token`` #multiword_token] represents a multi-word token
described in [CoNLL-U format http://universaldependencies.org/docs/format.html].
The multi-word token references underlying words, it has a form and a misc field
(which may contain for example `SpaceAfter=No` feature). Other CoNLL-U word
fields are guaranteed to be empty.


== Class sentence ==[sentence]
```
class sentence {
 public:
  sentence();

  vector<[word #word]> words;
  vector<[multiword_token #multiword_token]> multiword_tokens;
  vector<string> comments;
  static const string root_form;

  bool [empty #sentence_empty]();
  void [clear #sentence_clear]();
  [word #word]& [add_word #sentence_add_word]([string_piece #string_piece] form = string_piece());
  void [set_head #sentence_set_head](int id, int head, const string& deprel);
  void [unlink_all_words #sentence_unlink_all_words]();
};
```

The [``sentence`` #sentence] class represents a sentence [CoNLL-U sentence http://universaldependencies.org/docs/format.html],
which consists of:
- sequence of [``word`` #word]s stored in ascending order, with the first word
  (with index 0) always being a technical root with form ``root_form``
- sequence of [``multiword_token`` #multiword_token]s also stored in ascending
  order
- comments
-

Although you can manipulate the ``words`` directly, the
[``sentence`` #sentence] class offers several simple node manipulation methods.


=== sentence::empty() ===[sentence_empty]
``` bool empty();

Returns ``true`` if the sentence is empty. i.e., if it contains only a technical root node.

=== sentence::clear() ===[sentence_clear]
``` void clear();

Removes all words, multi-word tokens and comments (only the technical root ``word`` is kept).

=== sentence::add_word() ===[sentence_add_word]
``` [word #word]& add_word([string_piece #string_piece] form = string_piece());

Adds a new word to the sentence. The new word has first unused ``id``,
specified ``form`` and is not linked to any other node. Reference to the new
word is returned so that other fields can be also filled.

=== sentence:set_head() ===[sentence_set_head]
``` void set_head(int id, int head, const std::string& deprel);

Link the word ``id`` to the word ``head``, with the specified dependency relation.
If the ``head`` is negative, the word ``id`` is unlinked from its current head,
if any.

=== sentence::unlink_all_words() ===[sentence_unlink_all_words]
``` void unlink_all_words();

Unlink all words.

== Class input_format ==[input_format]
```
class input_format {
 public:
  virtual ~input_format() {}

  virtual bool [read_block #input_format_read_block](istream& is, string& block) const = 0;
  virtual void [reset_document #input_format_reset_document]() {};
  virtual void [set_text #input_format_set_text]([string_piece #string_piece] text, bool make_copy = false) = 0;
  virtual bool [next_sentence #input_format_next_sentence]([sentence #sentence]& s, string& error) = 0;

  // Static factory methods
  static [input_format #input_format]* [new_input_format #input_format_new_input_format](const string& name);
  static [input_format #input_format]* [new_conllu_input_format #input_format_new_conllu_input_format]();
  static [input_format #input_format]* [new_horizontal_input_format #input_format_new_horizontal_input_format]();
  static [input_format #input_format]* [new_vertical_input_format #input_format_new_vertical_input_format]();

  static [input_format #input_format]* [new_presegmented_tokenizer #input_format_new_presegmented_tokenizer]([input_format #input_format]* tokenizer);
};
```

The [``input_format`` #input_format] class allows loading sentences in various formats.

Th class instances may store internal state and are not thread-safe.

=== input_format::read_block() ===[input_format_read_block]

``` virtual bool read_block(istream& is, string& block) const = 0;

Read a portion of input, which is guaranteed to contain only complete
sentences. Such portion is usually a paragraph (text followed by an empty line)
or a line, but it may be more complex (i.e., in a XML-like format).


=== input_format::reset_document() ===[input_format_reset_document]

``` virtual void reset_document() {};

Resets the [``input_format`` #input_format] instance state. Such state
is needed not only for remembering unprocessed text of the last
[``set_text`` #input_format_set_text] call, but also for correct inter-block
state tracking (for example in a tokenizer which returns document-level offsets,
or in a tokenizer which tracks inter-sentence spaces -- if you pass only spaces
to [``set_text`` #input_format_set_text], these spaces has to accumulate and be
returned as preceeding spaces of the next sentence).


=== input_format::set_text() ===[input_format_set_text]

``` virtual void set_text([string_piece #string_piece] text, bool make_copy = false) = 0;

Set the text from which the sentences will be read.

If ``make_copy`` is ``false``, only a reference to the given text is
stored and the user has to make sure it exists until the instance
is destroyed or ``set_text`` is called again. If ``make_copy``
is ``true``, a copy of the given text is made and retained until the
instance is destroyed or ``set_text`` is called again.


=== input_format::next_sentence() ===[input_format_next_sentence]

``` virtual bool next_sentence([sentence #sentence]& s, string& error) = 0;

Try reading another sentence from the text specified by
[``set_text #input_format_set_text]. Returns ``true`` if the sentence was
read and ``false`` if the text ended or there was a read error. The latter
two conditions can be distinguished by the ``error`` parameter -- if it is
empty, the text ended, if it is nonempty, it contains a description of the
read error.


=== input_format::new_input_format() ===[input_format_new_input_format]

``` static [input_format #input_format]* new_input_format(const string& name);

Create new [``input_format`` #input_format] instance, given its name.
The following input formats are currently supported:
- ``conllu``: return the [``new_conllu_input_format`` #input_format_new_conllu_input_format]
- ``horizontal``: return the [``new_horizontal_input_format`` #input_format_new_horizontal_input_format]
- ``vertical``: return the [``new_vertical_input_format`` #input_format_new_vertical_input_format]
-
The new instance must be deleted after use.


=== input_format::new_conllu_input_format() ===[input_format_new_conllu_input_format]

``` static [input_format #input_format]* new_conllu_input_format();

Create [``input_format`` #input_format] instance which loads sentences
in the [CoNLL-U format http://universaldependencies.github.io/docs/format.html].
The new instance must be deleted after use.


=== input_format::new_horizontal_input_format() ===[input_format_new_horizontal_input_format]

``` static [input_format #input_format]* new_horizontal_input_format();

Create [``input_format`` #input_format] instance which loads forms from a simple
horizontal format -- each sentence on a line, with word forms separated by spaces.
The new instance must be deleted after use.

=== input_format::new_vertical_input_format() ===[input_format_new_vertical_input_format]

``` static [input_format #input_format]* new_vertical_input_format();

Create [``input_format`` #input_format] instance which loads forms from a simple
vertical format -- each word on a line, with empty line denoting end of sentence.
The new instance must be deleted after use.


=== input_format::new_presegmented_tokenizer() ===[input_format_new_presegmented_tokenizer]

``` static [input_format #input_format]* new_presegmented_tokenizer([input_format #input_format]* tokenizer);

Create [``input_format`` #input_format] instance which acts as a tokenizer
adapter -- given a tokenizer which segments anywhere, it creates a tokenizer
which segments on newline characters (by calling the tokenizer on individual lines,
and if the tokenizer segments in the middle of the line, it calls it repeatedly
and merges the results).

The new instance must be deleted after use. Note that the new instance
//takes ownership// of the given ``tokenizer`` and //deletes// it during
its own deletion.


== Class output_format ==[output_format]
```
class output_format {
 public:
  virtual ~output_format() {}

  virtual void [write_sentence #output_format_write_sentence](const [sentence #sentence]& s, ostream& os) = 0;
  virtual void [finish_document #output_format_finish_document](ostream& os) {};

  // Static factory methods
  static [output_format #output_format]* [new_output_format #output_format_new_output_format](const string& name);
  static [output_format #output_format]* [new_conllu_output_format #output_format_new_conllu_output_format]();
  static [output_format #output_format]* [new_matxin_output_format #output_format_new_matxin_output_format]();
  static [output_format #output_format]* [new_horizontal_output_format #output_format_new_horizontal_output_format]();
  static [output_format #output_format]* [new_vertical_output_format #output_format_new_vertical_output_format]();
};
```

The [``output_format`` #output_format] class allows printing sentences
in various formats.

The class instances may store internal state and are not thread-safe.


=== output_format::write_sentence() ===[output_format_write_sentence]

``` virtual void write_sentence(const [sentence #sentence]& s, ostream& os) = 0;

Write given [``sentence`` #sentence] to the given output stream.

When the output format requires document-level markup, it is written
automatically when the first sentence is written using this
[``output_format`` #output_format] instance (or after
[``finish_document`` #output_format_finish_document] call).


=== output_format::finish_document() ===[output_format_finish_document]

``` virtual void finish_document(ostream& os) {};

When the output format requires document-level markup, write
the end-of-document mark and reset the [``output_format`` #output_format]
instance state (i.e., the next [``write_sentence`` #write_sentence]
will write start-of-document mark).


=== output_format::new_output_format() ===[output_format_new_output_format]

``` static [output_format #output_format]* new_output_format(const string& name);

Create new [``output_format`` #output_format] instance, given its name.
The following output formats are currently supported:
- ``conllu``: return the [``new_conllu_output_format`` #output_format_new_conllu_output_format]
- ``matxin``: return the [``new_matxin_output_format`` #output_format_new_matxin_output_format]
- ``horizontal``: return the [``new_horizontal_output_format`` #output_format_new_horizontal_output_format]
- ``vertical``: return the [``new_vertical_output_format`` #output_format_new_vertical_output_format]
-
The new instance must be deleted after use.

=== output_format::new_conllu_output_format() ===[output_format_new_conllu_output_format]

``` static [output_format #output_format]* new_conllu_output_format();

Creates [``output_format`` #output_format] instance for writing sentences
in the [CoNLL-U format http://universaldependencies.github.io/docs/format.html].
The new instance must be deleted after use.


=== output_format::new_matxin_output_format() ===[output_format_new_matxin_output_format]

``` static [output_format #output_format]* new_matxin_output_format();

Creates [``output_format`` #output_format] instance for writing sentences
in the Matxin format -- UDPipe produces a XML with the following DTD:
```
<!ELEMENT    corpus     (SENTENCE*)>
<!ELEMENT    SENTENCE   (NODE*)>
<!ATTLIST    SENTENCE    ord           CDATA        #REQUIRED
                         alloc         CDATA        #REQUIRED>
<!ELEMENT    NODE   (NODE*)>
<!ATTLIST    NODE        ord           CDATA        #REQUIRED
                         alloc         CDATA        #REQUIRED
                         form          CDATA        #REQUIRED
                         lem           CDATA        #REQUIRED
                         mi            CDATA        #REQUIRED
                         si            CDATA        #REQUIRED
                         sub           CDATA        #REQUIRED>
```
The new instance must be deleted after use.

=== output_format::new_horizontal_output_format() ===[output_format_new_horizontal_output_format]

``` static [output_format #output_format]* new_horizontal_output_format();

Creates [``output_format`` #output_format] instance for writing sentences
in a simple horizontal format -- each sentence on a line, with word forms separated
by spaces. The new instance must be deleted after use.


=== output_format::new_vertical_output_format() ===[output_format_new_vertical_output_format]

``` static [output_format #output_format]* new_vertical_output_format();

Creates [``output_format`` #output_format] instance for writing sentences
in a simple vertical format -- each word form on a line, with empty line
denoting end of sentence. The new instance must be deleted after use.


== Class model ==[model]
```
class model {
 public:
  virtual ~model() {}

  static [model #model]* [load #model_load_cstring](const char* fname);
  static [model #model]* [load #model_load_istream](istream& is);

  virtual [input_format #input_format]* [new_tokenizer #model_new_tokenizer](const string& options) const = 0;
  virtual bool [tag #model_tag]([sentence #sentence]& s, const string& options, string& error) const = 0;
  virtual bool [parse #model_parse]([sentence #sentence]& s, const string& options, string& error) const = 0;

  static const string DEFAULT;
  static const string TOKENIZER_PRESEGMENTED;
};
```


=== model::load(const char*) ===[model_load_cstring]

``` static [model #model]* load(const char* fname);


=== model::load(istream&) ===[model_load_istream]

``` static [model #model]* load(istream& is);


=== model::new_tokenizer() ===[model_new_tokenizer]

``` virtual [input_format #input_format]* new_tokenizer(const string& options) const = 0;


=== model::tag() ===[model_tag]

``` virtual bool tag([sentence #sentence]& s, const string& options, string& error) const = 0;


=== model::parse() ===[model_parse]

``` virtual bool parse([sentence #sentence]& s, const string& options, string& error) const = 0;


== Class pipeline ==[pipeline]
```
class pipeline {
 public:
  pipeline(const [model #model]* m, const string& input, const string& tagger, const string& parser, const string& output);

  void [set_model #pipeline_set_model](const [model #model]* m);
  void [set_input #pipeline_set_input](const string& input);
  void [set_tagger #pipeline_set_tagger](const string& tagger);
  void [set_parser #pipeline_set_parser](const string& parser);
  void [set_output #pipeline_set_output](const string& output);

  bool [process #pipeline_process](istream& is, ostream& os, string& error) const;

  static const string DEFAULT;
  static const string NONE;
};
```


=== pipeline::set_model() ===[pipeline_set_model]

``` void set_model(const [model #model]* m);


=== pipeline::set_input() ===[pipeline_set_input]

``` void set_input(const string& input);


=== pipeline::set_tagger() ===[pipeline_set_tagger]

``` void set_tagger(const string& tagger);


=== pipeline::set_parser() ===[pipeline_set_parser]

``` void set_parser(const string& parser);


=== pipeline::set_output() ===[pipeline_set_output]

``` void set_output(const string& output);


=== pipeline::process() ===[pipeline_process]

``` bool process(istream& is, ostream& os, string& error) const;


== Class trainer ==[trainer]
```
class trainer {
 public:
  static bool [train #trainer_train](const string& method, const vector<[sentence #sentence]>& train, const vector<[sentence #sentence]>& heldout,
                    const string& tokenizer, const string& tagger, const string& parser,
                    ostream& os, string& error);

  static const string DEFAULT;
  static const string NONE;
};
```

=== trainer::train() ===[trainer_train]

```
static bool train(const string& method, const vector<[sentence #sentence]>& train, const vector<[sentence #sentence]>& heldout,
                  const string& tokenizer, const string& tagger, const string& parser,
                  ostream& os, string& error);
```


== Class evaluator ==[evaluator]
```
class evaluator {
 public:
  evaluator(const [model #model]* m, const string& tokenizer, const string& tagger, const string& parser);

  void [set_model #evaluator_set_model](const [model #model]* m);
  void [set_tokenizer #evaluator_set_tokenizer](const string& tokenizer);
  void [set_tagger #evaluator_set_tagger](const string& tagger);
  void [set_parser #evaluator_set_parser](const string& parser);

  bool [evaluate #evaluator_evaluate](istream& is, ostream& os, string& error) const;

  static const string DEFAULT;
  static const string NONE;
};
```


=== evaluator::set_model() ===[evaluator_set_model]

``` void set_model(const [model #model]* m);


=== evaluator::set_tokenizer() ===[evaluator_set_tokenizer]

``` void set_tokenizer(const string& tokenizer);


=== evaluator::set_tagger() ===[evaluator_set_tagger]

``` void set_tagger(const string& tagger);


=== evaluator::set_parser() ===[evaluator_set_parser]

``` void set_parser(const string& parser);


=== evaluator::evaluate() ===[evaluator_evaluate]

``` bool evaluate(istream& is, ostream& os, string& error) const;


== Class version ==[version]
```
class version {
 public:
  unsigned major;
  unsigned minor;
  unsigned patch;
  string prerelease;

  static [version #version] [current #version_current]();
};
```

The [``version`` #version] class represents UDPipe version.
See [UDPipe Versioning #versioning] for more information.

=== version::current ===[version_current]
``` static [version #version] current();

Returns current UDPipe version.


== C++ Bindings API ==[cpp_bindings_api]

Bindings for other languages than C++ are created using SWIG from the C++
bindings API, which is a slightly modified version of the native C++ API.
Main changes are replacement of [``string_piece`` #string_piece] type by native
strings and removal of methods using ``istream``. Here is the C++ bindings API
declaration:

%!include: manual_bindings_api.t2t

== C# Bindings ==[csharp_bindings]

%!include: manual_bindings_csharp_api.t2t

== Java Bindings ==[java_bindings]

%!include: manual_bindings_java_api.t2t

== Perl Bindings ==[perl_bindings]

%!include: manual_bindings_perl_api.t2t

== Python Bindings ==[python_bindings]

%!include: manual_bindings_python_api.t2t
